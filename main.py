from tavily import TavilyClient
from dotenv import load_dotenv,find_dotenv
import os 
import json
import asyncio
from agents import Agent,Runner,RunConfig,function_tool,RunContextWrapper,FunctionToolResult,ToolsToFinalOutputResult

from agent_config.gemini_config import MODEL,external_client

load_dotenv(find_dotenv(),override=True)

tavily_api_key = os.getenv("TAVILY_API")

tavily_client = TavilyClient(tavily_api_key)



def stop_at_tool(ctx:RunContextWrapper,tool_result:list[FunctionToolResult])-> ToolsToFinalOutputResult:
    final_output = json.loads(tool_result[0].output)
    if final_output["error"]:
        return ToolsToFinalOutputResult(
            is_final_output=True,  # if true then the message is not send to the llm 
            final_output=final_output["message"]
            
        )
    else:
        return ToolsToFinalOutputResult(
            is_final_output=False, # if false then message is generated by llm 
            final_output=final_output["message"]
            
        )



def default_tool_error_function(ctx: RunContextWrapper, error: Exception) -> str:
    """The default tool error function, which just returns a generic error message."""
    return json.dumps({"error":True,"message":str(error)})







@function_tool(failure_error_function=default_tool_error_function)
def get_weather(query:str):
    """ get the weather update from real time data and give to the user """
    print("weather tool is called...")
    # x = 10/0
    responce = tavily_client.search(query)
    if responce["results"]:
        return json.dumps({"error":False,"message":responce["results"][0]['content']})
    elif responce['answer']:
        return json.dumps({"error":False,"message":responce["answer"]})
    else:
        return json.dumps({"error":True,"message":"sorry i can do this"})


@function_tool
def real_time_updates(query:str):
    """ get the user query and search from the web and answer to the user about its query  """
    print("Real Time update tool...")
    responce = tavily_client.search(query)
    return json.dumps({'error':False,'message':responce['results'][0]['content']}) 

    


info_agents = Agent(
    name="Informatiton Agent",
    instructions="you are a agent and you provide information only calling the right tool if appropriate tool is not then simply say sorry i am unable to do that ",
    tools=[get_weather,real_time_updates],
    tool_use_behavior=stop_at_tool


)

config = RunConfig(model=MODEL,model_provider=external_client,tracing_disabled=True)

prompt = input("Enter your question ")
async def mian():
    result = await Runner.run(info_agents,prompt,run_config=config)
    print(result.final_output)



asyncio.run(mian())

    

